name: Test Enhanced Indeed Scraper

on:
  workflow_dispatch:
    inputs:
      category:
        description: 'Job category to test'
        required: false
        default: 'python_developer'
        type: choice
        options:
          - python_developer
          - data_engineer
          - data_scientist

jobs:
  test-enhanced-indeed-scraper:
    runs-on: ubuntu-latest
    env:
      LINKEDIN_EMAIL: ${{ secrets.LINKEDIN_EMAIL }}
      LINKEDIN_PASSWORD: ${{ secrets.LINKEDIN_PASSWORD }}
      FLARESOLVERR_URL: http://localhost:8191/v1

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            docker-compose \
            xvfb \
            libnss3 \
            libgbm-dev \
            libgtk-3-0 \
            libxss1 \
            libatk-bridge2.0-0 \
            libx11-xcb1 \
            libxcb-dri3-0 \
            libdrm2 \
            libgbm1 \
            curl \
            dnsutils

      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install \
            playwright \
            httpx \
            requests \
            pyyaml \
            sqlalchemy \
            -r requirements.actions.txt
          playwright install chromium
          playwright install-deps

      - name: Start FlareSolverr Service
        run: |
          docker-compose up -d flaresolverr

          echo "Waiting for FlareSolverr to be ready..."

          # Improved health check with direct port testing
          MAX_ATTEMPTS=20
          ATTEMPT=0

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            echo "Checking FlareSolverr connectivity (Attempt $((ATTEMPT+1)))..."

            # Try multiple connection methods
            if docker exec flaresolverr curl -s http://localhost:8191/health | grep -q "ok"; then
              echo "✅ FlareSolverr is ready via docker exec"
              break
            fi

            if curl -s http://localhost:8191/health | grep -q "ok"; then
              echo "✅ FlareSolverr is ready via direct curl"
              break
            fi

            # Verbose logging of container status
            docker ps | grep flaresolverr
            docker logs flaresolverr

            sleep 10
            ATTEMPT=$((ATTEMPT+1))
          done

          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "❌ FlareSolverr failed to become ready"
            docker-compose logs flaresolverr
            exit 1
          fi

      - name: Check FlareSolverr Service
        run: |
          echo "Checking FlareSolverr service..."
          
          # Try different connection methods
          echo "Trying localhost..."
          curl -v -X POST http://localhost:8191/v1 \
            -H "Content-Type: application/json" \
            -d '{"cmd":"request.get","url":"https://example.com","maxTimeout":60000}'
          
          echo "Trying 127.0.0.1..."
          curl -v -X POST http://127.0.0.1:8191/v1 \
            -H "Content-Type: application/json" \
            -d '{"cmd":"request.get","url":"https://example.com","maxTimeout":60000}'
          
          echo "Docker container logs:"
          docker logs flaresolverr

      - name: Detailed FlareSolverr Debugging
        run: |
          echo "FlareSolverr Service Status:"
          docker ps | grep flaresolverr
          
          echo "FlareSolverr Logs:"
          docker logs flaresolverr
          
          echo "Testing FlareSolverr Connectivity:"
          curl -v -X POST http://localhost:8191/v1 \
            -H "Content-Type: application/json" \
            -d '{
              "cmd": "request.get",
              "url": "https://www.indeed.com/jobs?q=python+developer",
              "maxTimeout": 300000,
              "returnOnlySolution": false,
              "sessions": true
            }'

      - name: Network Diagnostics
        run: |
          echo "Hostname resolution:"
          hostname
          hostname -I
          
          echo "DNS Configuration:"
          cat /etc/resolv.conf
          
          echo "Docker Networks:"
          docker network ls
          docker network inspect job_network || true
          
          echo "Docker Containers:"
          docker ps
          
          echo "Checking FlareSolverr container:"
          docker inspect flaresolverr
          
      - name: Advanced Network Debugging
        run: |
          echo "Detailed Network Diagnostics:"
          
          echo "--- Docker Network Configuration ---"
          docker network inspect bridge
          docker network inspect job_network || true
          
          echo "--- Host Network Interfaces ---"
          ip addr show
          
          echo "--- Routing Table ---"
          ip route
          
          echo "--- DNS Configuration ---"
          cat /etc/resolv.conf
          
          echo "--- Testing FlareSolverr Connectivity ---"
          curl -v http://localhost:8191/v1
          docker run --network host curlimages/curl -v http://localhost:8191/v1

      - name: Run Enhanced Indeed Scraper Test
        env:
          FLARESOLVERR_URL: http://localhost:8191/v1
        run: |
          xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" python -m app.scrapers.scraper_main --test-indeed --category=${{ github.event.inputs.category }}

      - name: List Generated Files
        if: always()
        run: |
          echo "Directory contents:"
          ls -la
          echo "Screenshots directory:"
          ls -la screenshots/ || echo "No screenshots found"

      - name: Upload Screenshots as Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: indeed-scraper-screenshots
          path: |
            screenshots/**/*.png
            *.png
          if-no-files-found: warn

      - name: Cleanup Docker Services
        if: always()
        run: |
          docker-compose down --remove-orphans