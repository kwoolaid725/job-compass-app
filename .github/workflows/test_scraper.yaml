name: Test Enhanced Indeed Scraper

on:
  workflow_dispatch:
    inputs:
      category:
        description: 'Job category to test'
        required: false
        default: 'python_developer'
        type: choice
        options:
          - python_developer
          - data_engineer
          - data_scientist

jobs:
  test-enhanced-indeed-scraper:
    runs-on: ubuntu-latest
    env:
      LINKEDIN_EMAIL: ${{ secrets.LINKEDIN_EMAIL }}
      LINKEDIN_PASSWORD: ${{ secrets.LINKEDIN_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xvfb \
            libnss3 \
            libxss1 \
            libatk-bridge2.0-0 \
            libgbm-dev \
            libgtk-3-0 \
            libxshmfence-dev \
            docker-compose

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.actions.txt
          pip install playwright httpx
          playwright install --with-deps

      - name: Start Docker services
        run: |
          docker-compose up -d
          
          # Extended service check
          max_attempts=20
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            echo "Checking FlareSolverr service (attempt $((attempt + 1))/$max_attempts)"
          
            # Verbose network diagnostics
            docker network inspect job-compass_job_network
          
            # Check Docker container details
            docker inspect flaresolverr
          
            # Check Docker logs
            docker logs flaresolverr
          
            # Network debugging
            docker run --network job-compass_job_network curlimages/curl \
              -v http://flaresolverr:8191/health || true
          
            # Try direct Docker container exec health check
            docker exec flaresolverr curl -v http://localhost:8191/health || true
          
            # Attempt to ping the container
            docker run --network job-compass_job_network \
              nicolaka/netshoot ping -c 4 flaresolverr || true
          
            # Check port listening
            docker run --network job-compass_job_network \
              nicolaka/netshoot nc -zv flaresolverr 8191 || true
          
            # Advanced network troubleshooting
            docker run --network job-compass_job_network \
              nicolaka/netshoot /bin/sh -c "
                ip addr;
                ip route;
                cat /etc/resolv.conf;
                ping -c 4 flaresolverr;
                nc -zv flaresolverr 8191
              " || true
          
            # Test connectivity using Docker network
            response=$(docker run --network job-compass_job_network \
              curlimages/curl -s -X POST http://flaresolverr:8191/v1 \
              -H "Content-Type: application/json" \
              -d '{"cmd":"test"}')
          
            echo "FlareSolverr test response: $response"
          
            # Check if response indicates service is ready
            if echo "$response" | grep -q "ok"; then
              echo "FlareSolverr service is ready"
              break
            fi
          
            sleep 15
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "FlareSolverr failed to become ready after $max_attempts attempts"
            exit 1
          fi

      - name: Check Service Readiness
        run: |
          # Verify port is actually listening
          sudo netstat -tuln | grep 8191 || echo "Port 8191 not listening"
          # Additional network diagnostics
          nc -zv localhost 8191

      - name: Debug Environment
        run: |
          echo "Python version:"
          python --version
          echo "Playwright version:"
          pip show playwright
          echo "Docker Compose services:"
          docker-compose ps

      - name: Run Enhanced Indeed Scraper Test
        env:
          # Ensure the scraper uses localhost
          FLARESOLVERR_URL: http://localhost:8191/v1
        run: |
          xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" python -m app.scrapers.scraper_main --test-indeed

      - name: List generated files
        if: always()
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Screenshots directory contents:"
          ls -la screenshots/ || echo "No screenshots directory"

      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: indeed-scraper-screenshots
          path: |
            screenshots/**/*.png
            *.png
          if-no-files-found: warn

      - name: Cleanup Docker services
        if: always()
        run: |
          docker-compose down